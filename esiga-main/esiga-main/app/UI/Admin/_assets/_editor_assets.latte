<style>
    
   .editor-wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: row;
    position: relative;
}

#left-panel {
    width: 30%;
    min-width: 100px;
    max-width: 80%;
    padding: 20px;
    background-color: #f4f4f4;
    border-right: 1px solid #ddd;
    overflow-y: auto;
    height: 100%;
}

#splitter {
    width: 8px;
    background-color: #ddd;
    cursor: col-resize;
    height: 100%;
}

#splitter:hover {
    background-color: #ccc;
}

#right-panel {
    flex: 1;
    height: 100%;
    position: relative;
}

iframe {
    width: 100%;
    height: 100%;
    border: none;
}


    .highlight {
        outline: 2px dashed red;
    }

    #editor-form{
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
    }

    

    #editor-form button{
        width:100%;
        font-weight: 600;
        color: white;
        background:linear-gradient(to left, rgba(61, 141, 221, 1) 50%, rgba(153, 206, 255, 1) 100%);
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        border: none;
        padding: 0.75rem 1.25rem;
        font-size: 1rem;
        border-radius: 0.375rem;
        transition: all 0.2s ease-in-out;
    }


        
.form-label-group {
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
}

.form-control {
  font-size: 15px;
}

.form-label-group > input,
.form-label-group > label {
  padding: 0.75rem;
  width: 100%;
  box-sizing: border-box;
}

.form-label-group > input {
  height: 3.125rem;
}

.form-label-group > label {
  position: absolute;
  top: 0;
  left: 0;
  display: block;
  margin-bottom: 0;
  line-height: 1.5;
  color: #495057;
  pointer-events: none;
  cursor: text;
  border: 1px solid transparent;
  border-radius: 0.25rem;
  transition: all 0.1s ease-in-out;
}

.form-label-group input::-webkit-input-placeholder {
  color: transparent;
}

.form-label-group input:-ms-input-placeholder {
  color: transparent;
}

.form-label-group input::-ms-input-placeholder {
  color: transparent;
}

.form-label-group input::-moz-placeholder {
  color: transparent;
}

.form-label-group input::placeholder {
  color: transparent;
}

.form-label-group input:not(:placeholder-shown) {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

.form-label-group input:not(:placeholder-shown) ~ label {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  font-size: 12px;
  color: #777;
}



    
    </style>


<script>

    document.addEventListener('DOMContentLoaded', () => {
     
        const splitter = document.getElementById('splitter');
    const leftPanel = document.getElementById('left-panel');
    const wrapper = document.querySelector('.editor-wrapper');
    let isResizing = false;
    let startX, startWidth;

    // Mouse events for desktop
    splitter.addEventListener('mousedown', startResizing);
    document.addEventListener('mousemove', resize);
    document.addEventListener('mouseup', stopResizing);

    // Touch events for mobile
    splitter.addEventListener('touchstart', startResizing);
    document.addEventListener('touchmove', resize);
    document.addEventListener('touchend', stopResizing);

    function startResizing(e) {
        isResizing = true;
        startX = e.type === 'mousedown' ? e.pageX : e.touches[0].pageX;
        startWidth = leftPanel.offsetWidth;

        // Add a class to prevent text selection while resizing
        document.body.classList.add('resizing');
    }

    function resize(e) {
        if (!isResizing) return;

        e.preventDefault();
        
        const currentX = e.type === 'mousemove' ? e.pageX : e.touches[0].pageX;
        const diff = currentX - startX;
        const newWidth = Math.min(Math.max(100, startWidth + diff), wrapper.offsetWidth * 0.8);
        
        leftPanel.style.width = `${ newWidth}px`;
    }

    function stopResizing() {
        isResizing = false;
        document.body.classList.remove('resizing');
    }






        //Editor logic

        const iframe = document.getElementById('page-frame');
        const form = document.getElementById('editor-form');
        const pageSelector = document.getElementById('page-selector');
        let currentHighlight = null;

        // Function to clear all existing inputs but keep the submit button
        function clearFormInputs() {
            const submitButton = form.querySelector('button[type="submit"]');
            form.innerHTML = '';
            if (submitButton) {
                form.appendChild(submitButton);
            }
        }

        pageSelector.addEventListener('change', function () {
            const selectedOption = pageSelector.options[pageSelector.selectedIndex];
            let path = {$baseUrl} + selectedOption.value;
            if (selectedOption.value != "") {
                path = {$baseUrl} + "/" + selectedOption.value;
            }
            clearFormInputs(); // Clear form before loading new page
            iframe.src = path;
        });

        iframe.onload = function () {
            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
            
            // Clear existing form inputs first
            clearFormInputs();

            // Prevent link clicks in iframe
            iframeDoc.addEventListener('click', function(e) {
                const closest = e.target.closest('a');
                if (closest) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            }, true);

            // Add styles to iframe document for highlighting
            const style = iframeDoc.createElement('style');
            style.textContent = `
                .highlight-element {
                    outline: 2px solid #007bff !important;
                    background-color: rgba(0, 123, 255, 0.1) !important;
                    cursor: pointer !important;
                }
                /* Make links look clickable but prevent navigation */
                a {
                    pointer-events: none;
                    cursor: default;
                }
            `;
            iframeDoc.head.appendChild(style);

            const editableElements = iframeDoc.querySelectorAll('[data-key]');

            // Create form inputs
            editableElements.forEach((element) => {
                const key = element.getAttribute('data-key');
                const value = element.textContent.trim();

                const div = document.createElement('div');
                div.className = 'form-label-group';

                const input = document.createElement('input');
                input.type = 'text';
                input.id = `input-${ key}`;
                input.name = key;
                input.placeholder = key;
                input.value = value;
                input.className = "form-control";

                // Function to update iframe content
                const updateIframeContent = () => {
                    const iframeElement = iframe.contentDocument.querySelector(`[data-key="${ key}"]`);
                    if (iframeElement) {
                        iframeElement.textContent = input.value;
                    }
                };

                input.addEventListener('focus', () => {
                    const iframeElement = iframe.contentDocument.querySelector(`[data-key="${ key}"]`);
                    if (iframeElement) {
                        highlightIframeElement(iframeElement);
                        scrollIframeToElement(iframeElement);
                    }
                });

                input.addEventListener('blur', () => {
                    const iframeElement = iframe.contentDocument.querySelector(`[data-key="${ key}"]`);
                    if (iframeElement) {
                        removeHighlight(iframeElement);
                    }
                });

                input.addEventListener('input', updateIframeContent);

                div.appendChild(input);
                form.appendChild(div);

                element.addEventListener('mouseenter', () => {
                    element.classList.add('highlight-element');
                });

                element.addEventListener('mouseleave', () => {
                    if (currentHighlight !== element) {
                        element.classList.remove('highlight-element');
                    }
                });

                element.addEventListener('click', (e) => {
                    e.preventDefault();
                    const input = document.getElementById(`input-${ key}`);
                    if (input) {
                        highlightIframeElement(element);
                        scrollToInput(input);
                        input.focus();
                    }
                });
            });
        };

        // Helper functions
        function highlightIframeElement(element) {
            if (currentHighlight) {
                currentHighlight.classList.remove('highlight-element');
            }
            element.classList.add('highlight-element');
            currentHighlight = element;
        }

        function removeHighlight(element) {
            element.classList.remove('highlight-element');
            if (currentHighlight === element) {
                currentHighlight = null;
            }
        }

        function scrollToInput(input) {
            input.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        function scrollIframeToElement(element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }


        // SAVING INPUTS

        const editorSaveLink = {link saveEditorTexts!}

        form.addEventListener('submit', function(event) {
       
            event.preventDefault();
            var formData = {};
            var inputs = form.querySelectorAll('input, textarea, select');

            inputs.forEach(function(input) {
                    formData[input.name] = input.value;
            });
            console.log(formData);

            naja.makeRequest('POST', editorSaveLink, formData, { history: false })
                .then(function(response) {
                    const currentSrc = iframe.src;
                    clearFormInputs();
                    iframe.src = currentSrc;
                    showNotification(response);
                })
                .catch(function(error) {
                    const response = {
                        error: true,
                        message: 'Nepodařilo se uložit'
                    };
                    showNotification(response);
                });
        
    });



    });


    </script>