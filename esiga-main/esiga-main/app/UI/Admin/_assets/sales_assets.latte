<style>


.edit-modal {
  display: none;
  position: absolute;
  z-index: 1;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: transparent;
  justify-content: center;
  align-items: center;
}

.edit-modal-content {
  background-color: #fff;
  padding: 30px 30px;
  border: 1px solid #888;
  border-radius: 30px;
  width: 80%;
  display: flex;
  flex-direction: column;
  gap: 40px;
  box-shadow: 0 0.125rem 0.25rem 0 var(--text);

}

.edit-modal-content .modal-title-container {
  display: flex;
  justify-content: space-between;
align-items: center;
}

.edit-modal-content .modal-title-container h2 {
  margin: 0;
}

.edit-modal-close {
  color: black;
  float: right;
  font-size: 30px;
}

.edit-modal-close:hover,
.edit-modal-close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}


.edit-form{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 20px;
}





.form-label-group {
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
}

.form-checkbox-container{
    width:100%;
}

.form-label-group > input,
.form-label-group > label {
  padding: 0.75rem;
  width: 100%;
  box-sizing: border-box;
}

.form-label-group > input {
  height: 3.125rem;
}

.form-label-group > label {
  position: absolute;
  top: 0;
  left: 0;
  display: block;
  margin-bottom: 0;
  line-height: 1.5;
  color: #495057;
  pointer-events: none;
  cursor: text;
  border: 1px solid transparent;
  border-radius: 0.25rem;
  transition: all 0.1s ease-in-out;
}

.form-label-group input::-webkit-input-placeholder {
  color: transparent;
}

.form-label-group input:-ms-input-placeholder {
  color: transparent;
}

.form-label-group input::-ms-input-placeholder {
  color: transparent;
}

.form-label-group input::-moz-placeholder {
  color: transparent;
}

.form-label-group input::placeholder {
  color: transparent;
}

.form-label-group input:not(:placeholder-shown) {
  padding-top: 1.25rem;
  padding-bottom: 0.25rem;
}

.form-label-group input:not(:placeholder-shown) ~ label {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  font-size: 12px;
  color: #777;
}


















.badge.logout {
    color: #F95F53;
	border: 1px solid #F95F53;
}

.badge.login {
	color: #ffaf00;
	border: 1px solid #ffaf00;
}



.badge {
	border-radius: 20px;
    margin: -1px;
}


</style>



<script>


    var linkSaveItem = {link saveItem!};
    var linkDeleteItem = {link deleteItem!};

    let isEditing = false;
    let editModal = null;



   const productsConfigArray = {$configArray}.mainTables;


    document.addEventListener('DOMContentLoaded', function() {
                
        editModal = document.getElementById("productModal");

        const closeBtn = document.getElementsByClassName("edit-modal-close")[0];

        closeBtn.onclick = function() {
          editModal.style.display = "none";
        }

    });






    function openModal(button) {

        isEditing = true;
        
        if (button.classList.contains('table-add-btn')) {

          for (const table in productsConfigArray) {
            for (const key in productsConfigArray[table].variables) {
              const input = document.querySelector(`input[name="${ key }"]`);
              if (input) {
                  input.value = (key === 'id') ? '-1' : '';
              }
            }  
          }

        } else if (button.classList.contains('table-edit-btn')) {
        
            const row = button.closest('tr');

            for (const table in productsConfigArray) {
              for (const [key, value] of Object.entries(productsConfigArray[table].variables)) {
                  const input = document.querySelector(`input[name="${ key }"]`);
                  if (value.visibility != 'hidden'){
                    if (input) {
                        input.value = (key === 'id') 
                            ? row.getAttribute('data-id')
                            : row.querySelector(`.${ key }`).textContent;
                    }
                  }
                }
            }
        }


   

        document.getElementById("editProductForm").onsubmit = function (event) {
                event.preventDefault();

                 let formData = {};

                 for (const table in productsConfigArray) {

                      if (!formData[table]) {
                        formData[table] = {
                            properties: {'type': productsConfigArray[table].properties.type}, 
                            variables: {}
                        };
                     
                    }

                    for (const [key, value] of Object.entries(productsConfigArray[table].variables)) {
                      
                        if (value.selection != false){

                          if (value.type == 'id') { 

                              formData[table].variables[key] = document.querySelector(`input[name="${ key }"]`).value

                          }else{

                              if (value.type == 'foreinKey') 
                              { 
                                  const checkboxes = document.querySelectorAll(`input[name="${ key}"]:checked`);
                                  formData[table].variables[key] = [];

                                  checkboxes.forEach(checkbox => {
                                      formData[table].variables[key].push(parseInt(checkbox.value)); 
                                  });

                              }else{

                                  const input = document.querySelector(`input[name="${ key }"]`);
                                    if (input) {
                                        formData[table].variables[key] = input.value;
                                    }
                              }
                          }

                        }else{
                          if ('foreinKeyTable' in value && 'foreinKeyItem' in value){

                            formData[table].variables[key] = formData[value.foreinKeyTable].variables[value.foreinKeyItem];

                          }
                        }
                    }
                }


              console.log(formData);


                naja.makeRequest('POST', linkSaveItem, formData , { history: false } )
                    .then(function(response) {

                        editModal.style.display = "none";
                        const message = {
                          error: false,
                          message: 'Úspěšně uloženo'
                        };
                        showNotification(message);
                        isEditing = false;

                    }).catch(function(error) {
                        console.error('Error:', error);
                        const message = {
                          error: true,
                          message: 'Nepodařilo se uložit, zkuste to znovu'
                        };
                        showNotification(message);
                        isEditing = false;
                });
        };

        editModal.style.display = "flex";
    }



    


    function deleteItem(button){


            let row = button.closest('tr');
            let id = row.getAttribute('data-id');

            if (confirm("Opravdu chcete smazat tento řádek?")) {
                naja.makeRequest('POST', linkDeleteItem, { id: id }, { history: false })
                    .then(function(response) {
                    })
                    .catch(function(error) {
                        console.error(error);
                    });
            } else {
                return;
            }
    }










</script>


