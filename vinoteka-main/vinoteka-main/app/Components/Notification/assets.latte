<script>

        {* Spinner *}

        {* Spinner usage 
         
        notifySystem.processResponse(response);
        notifySystem.showLoading('Odesílání objednávky...');
        notifySystem.processResponse(response, 2000, 
            () => {
                window.location.href = 'http://esiga.localhost/order/summary';
            }
        );


        const response = await notifySystem.during(
            naja.makeRequest('POST', linkSendOrder, formData, { history: false }),
            'Odesílání objednávky...'
        );


        toastSystem.showNotification(response);

*}



/**
 * Notification System
 * Handles loading spinners and status notifications
 */
const notifySystem = {
    _element: null,
    _textElement: null,
    _timeoutId: null,
    _currentType: null,
    
    /**
     * Get the notification element
     * @returns { HTMLElement } The notification element
     */
    get element() {
        if (!this._element) {
            this._element = document.getElementById('notificationSystem');
            if (!this._element) {
                console.error('Notification system element not found. Make sure to include the HTML.');
            }
        }
        return this._element;
    },
    
    /**
     * Get the text element
     * @returns { HTMLElement } The text element
     */
    get textElement() {
        if (!this._textElement) {
            this._textElement = this.element.querySelector('.notification-text');
        }
        return this._textElement;
    },
    
    /**
     * Set the notification type (loading, success, error)
     * @param { string } type - The notification type
     */
    setType(type) {
        const element = this.element;
        
        // Remove existing type classes
        element.classList.remove('type-loading', 'type-success', 'type-error');
        
        // Add the new type class
        if (type) {
            element.classList.add(`type-${ type }`);
            this._currentType = type;
        }
    },
    
    /**
     * Show the loading spinner
     * @param { string } message - Optional message to display
     */
    showLoading(message = 'Načítání...') {
        this.clearTimeout();
        this.setType('loading');
        this.textElement.textContent = message;
        this.element.classList.add('active');
        document.body.style.overflow = 'hidden';
    },
    
    /**
     * Show a success notification
     * @param { string } message - The success message
     * @param { number } duration - How long to show the notification (ms)
     * @param { Function } callback - Optional callback after notification is hidden
     */
    showSuccess(message, duration = 2000, callback = null) {
        this.clearTimeout();
        this.setType('success');
        this.textElement.textContent = message;
        this.element.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        if (duration > 0) {
            this._timeoutId = setTimeout(() => {
                this.hide();
                if (callback && typeof callback === 'function') {
                    callback();
                }
            }, duration);
        }
    },
    
    /**
     * Show an error notification
     * @param { string } message - The error message
     * @param { number } duration - How long to show the notification (ms)
     * @param { Function } callback - Optional callback after notification is hidden
     */
    showError(message, duration = 2000, callback = null) {
        this.clearTimeout();
        this.setType('error');
        this.textElement.textContent = message;
        this.element.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        if (duration > 0) {
            this._timeoutId = setTimeout(() => {
                this.hide();
                if (callback && typeof callback === 'function') {
                    callback();
                }
            }, duration);
        }
    },
    
    /**
     * Hide the notification
     */
    hide() {
        this.clearTimeout();
        this.element.classList.remove('active');
        document.body.style.overflow = '';
    },
    
    /**
     * Clear any active timeout
     */
    clearTimeout() {
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
            this._timeoutId = null;
        }
    },
    
    /**
     * Process API response and show appropriate notification
     * @param { Object } response - The API response object
     * @param { number } duration - How long to show the notification (ms)
     * @param { Function } successCallback - Optional callback for success
     * @param { Function } errorCallback - Optional callback for error
     */
    processResponse(response, duration = 2000, successCallback = null, errorCallback = null) {
        if (response.error) {
            this.showError(response.message || 'Nastala chyba', duration, errorCallback);
        } else {
            this.showSuccess(response.message || '', duration, successCallback);
        }
    },
    
    /**
     * Show notification during async operation
     * @param { Promise } promise - The promise to wait for
     * @param { string } loadingMessage - Message to show during loading
     * @param { number } duration - How long to show success/error message
     * @returns { Promise } - The original promise
     */
    async during(promise, loadingMessage = 'Načítání...', duration = 2000) {
        this.showLoading(loadingMessage);
        
        try {
            const result = await promise;
            
            // Check if result is an API response
            if (result && typeof result === 'object') {
                this.processResponse(result, duration);
            } else {
                this.hide();
            }
            
            return result;
        } catch (error) {
            this.showError('Nastala chyba: ' + (error.message || ''), duration);
            throw error;
        }
    }
};


/**
 * Toast Notification System
 * Shows simple notifications at the top of the page
 */
/**
 * Toast Notification System
 * Shows simple notifications at the top of the page that match SIGA website styling
 */
const toastSystem = {
    /**
     * Show a notification based on API response
     * @param { object} response - API response object
     * @param { boolean} response.error - Whether there's an error
     * @param { string} response.message - The message to display
     * @param { number|string} [response.cartTotal] - Optional cart total
     * @param { number} duration - How long to show the notification in ms (default 5000ms)
     */
    showNotification(response, duration = 5000) {
        if (!response || !response.message) {
            return;
        }
        
        // Remove any existing notification
        this.removeExistingNotification();
        
        // Create notification element
        const notification = document.createElement('div');
        notification.id = 'toast-notification';
        
        // Set color scheme based on response type
        if (response.error) {
            notification.className = 'error';
        } else {
            notification.className = 'success';
        }
        
        // Create message element
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.textContent = response.message;
        
        // Add to notification
        notification.appendChild(messageElement);
        
       
        
        // Add to document
        document.body.appendChild(notification);
        
        // Trigger animation
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        // Set timeout for auto-removal
        setTimeout(() => {
            notification.classList.remove('show');
            
            setTimeout(() => {
                this.removeExistingNotification();
            }, 300);
        }, duration);
    },
    
    /**
     * Remove any existing notification
     */
    removeExistingNotification() {
        const existingNotification = document.getElementById('toast-notification');
        if (existingNotification) {
            existingNotification.remove();
        }
    }
};
           

</script>



<style>

  {* Spinner *}
 .notification-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease;
}

.notification-container {
    background-color: white;
    border-radius: 8px;
    padding: 30px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 90%;
    width: 400px;
}

/* Spinner Styles */
.spinner-wrapper {
    margin-bottom: 10px;
}

.spinner {
    width: 60px;
    height: 60px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #004384; /* Blue color */
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Status Icons */
.status-icon {
    display: none;
    margin-bottom: 10px;
}

.success-icon svg {
    animation: scaleIn 0.3s ease-out;
}

.error-icon svg {
    animation: scaleIn 0.3s ease-out;
}

@keyframes scaleIn {
    0% { transform: scale(0); }
    70% { transform: scale(1.2); }
    100% { transform: scale(1); }
}

/* Accent Bar */
.accent-bar {
    width: 80px;
    height: 4px;
    background-color: #ffd700; /* Yellow color */
    margin: 10px 0;
}

/* Message Text */
.notification-text {
    font-family: Arial, sans-serif;
    color: #333;
    font-weight: 500;
    margin-top: 10px;
    word-break: break-word;
}

/* Active State */
.notification-backdrop.active {
    opacity: 1;
    visibility: visible;
}

/* Types */
.notification-backdrop.type-loading .spinner-wrapper {
    display: block;
}
.notification-backdrop.type-loading .status-icon {
    display: none;
}

.notification-backdrop.type-success .spinner-wrapper {
    display: none;
}
.notification-backdrop.type-success .success-icon {
    display: block;
}
.notification-backdrop.type-success .accent-bar {
    background-color: #4CAF50;
}

.notification-backdrop.type-error .spinner-wrapper {
    display: none;
}
.notification-backdrop.type-error .error-icon {
    display: block;
}
.notification-backdrop.type-error .accent-bar {
    background-color: #F44336;
}

/* Toast Notification Styles - Matching SIGA website colors */
#toast-notification {
    position: fixed;
    top: 60px; /* Position below navbar */
    left: 50%;
    transform: translateX(-50%) translateY(-20px);
    z-index: 9998;
    padding: 12px 20px;
    border-radius: 4px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    max-width: 90%;
    width: auto;
    min-width: 200px;
    text-align: center;
    font-family: Arial, sans-serif;
    transition: opacity 0.3s, transform 0.3s;
    opacity: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

#toast-notification.success {
    background-color: #004384; /* SIGA blue color */
    color: white;
    border-left: 4px solid #FED700; /* Yellow accent */
}

#toast-notification.error {
    background-color: #f8d7da;
    color: #721c24;
    border-left: 4px solid #dc3545;
}

#toast-notification .message {
    font-weight: 500;
    margin-bottom: 4px;
}

#toast-notification .cart-info {
    font-size: 14px;
    opacity: 0.9;
}

#toast-notification.show {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
}

</style>